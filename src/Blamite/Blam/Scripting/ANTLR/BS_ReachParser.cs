//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BS_Reach.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BS_ReachParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, DAMAGEREGION=15, MODELSTATE=16, 
		BOOLEAN=17, VALUETYPE=18, SCRIPTTYPE=19, STRING=20, FLOAT=21, INT=22, 
		ID=23, LP=24, RP=25, COMMENT=26, WS=27;
	public const int
		RULE_hsc = 0, RULE_globalDeclaration = 1, RULE_scriptDeclaration = 2, 
		RULE_scriptParameters = 3, RULE_cond = 4, RULE_branch = 5, RULE_call = 6, 
		RULE_condGroup = 7, RULE_parameterGroup = 8, RULE_scriptID = 9, RULE_functionID = 10, 
		RULE_globalsReference = 11, RULE_expression = 12, RULE_literal = 13;
	public static readonly string[] ruleNames = {
		"hsc", "globalDeclaration", "scriptDeclaration", "scriptParameters", "cond", 
		"branch", "call", "condGroup", "parameterGroup", "scriptID", "functionID", 
		"globalsReference", "expression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'global'", "'script'", "','", "'cond'", "'branch'", "'!='", "'>='", 
		"'<='", "'*'", "'+'", "'<'", "'-'", "'='", "'>'", null, null, null, null, 
		null, null, null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "DAMAGEREGION", "MODELSTATE", "BOOLEAN", "VALUETYPE", 
		"SCRIPTTYPE", "STRING", "FLOAT", "INT", "ID", "LP", "RP", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BS_Reach.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BS_ReachParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BS_ReachParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BS_ReachParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class HscContext : ParserRuleContext {
		public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		public ScriptDeclarationContext[] scriptDeclaration() {
			return GetRuleContexts<ScriptDeclarationContext>();
		}
		public ScriptDeclarationContext scriptDeclaration(int i) {
			return GetRuleContext<ScriptDeclarationContext>(i);
		}
		public HscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hsc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterHsc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitHsc(this);
		}
	}

	[RuleVersion(0)]
	public HscContext hsc() {
		HscContext _localctx = new HscContext(Context, State);
		EnterRule(_localctx, 0, RULE_hsc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 28; globalDeclaration();
					}
					break;
				case 2:
					{
					State = 29; scriptDeclaration();
					}
					break;
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ITerminalNode VALUETYPE() { return GetToken(BS_ReachParser.VALUETYPE, 0); }
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(LP);
			State = 35; Match(T__0);
			State = 36; Match(VALUETYPE);
			State = 37; Match(ID);
			State = 38; expression();
			State = 39; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptDeclarationContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ITerminalNode SCRIPTTYPE() { return GetToken(BS_ReachParser.SCRIPTTYPE, 0); }
		public ITerminalNode VALUETYPE() { return GetToken(BS_ReachParser.VALUETYPE, 0); }
		public ScriptIDContext scriptID() {
			return GetRuleContext<ScriptIDContext>(0);
		}
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public ScriptParametersContext scriptParameters() {
			return GetRuleContext<ScriptParametersContext>(0);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public GlobalsReferenceContext[] globalsReference() {
			return GetRuleContexts<GlobalsReferenceContext>();
		}
		public GlobalsReferenceContext globalsReference(int i) {
			return GetRuleContext<GlobalsReferenceContext>(i);
		}
		public BranchContext[] branch() {
			return GetRuleContexts<BranchContext>();
		}
		public BranchContext branch(int i) {
			return GetRuleContext<BranchContext>(i);
		}
		public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public ScriptDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterScriptDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitScriptDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ScriptDeclarationContext scriptDeclaration() {
		ScriptDeclarationContext _localctx = new ScriptDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_scriptDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(LP);
			State = 42; Match(T__1);
			State = 43; Match(SCRIPTTYPE);
			State = 44; Match(VALUETYPE);
			State = 45; scriptID();
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 46; scriptParameters();
				}
				break;
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 53;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 49; call();
					}
					break;
				case 2:
					{
					State = 50; globalsReference();
					}
					break;
				case 3:
					{
					State = 51; branch();
					}
					break;
				case 4:
					{
					State = 52; cond();
					}
					break;
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID || _la==LP );
			State = 57; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptParametersContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ParameterGroupContext[] parameterGroup() {
			return GetRuleContexts<ParameterGroupContext>();
		}
		public ParameterGroupContext parameterGroup(int i) {
			return GetRuleContext<ParameterGroupContext>(i);
		}
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public ScriptParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterScriptParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitScriptParameters(this);
		}
	}

	[RuleVersion(0)]
	public ScriptParametersContext scriptParameters() {
		ScriptParametersContext _localctx = new ScriptParametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_scriptParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(LP);
			State = 60; parameterGroup();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 61; Match(T__2);
				State = 62; parameterGroup();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public CondGroupContext[] condGroup() {
			return GetRuleContexts<CondGroupContext>();
		}
		public CondGroupContext condGroup(int i) {
			return GetRuleContext<CondGroupContext>(i);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 8, RULE_cond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(LP);
			State = 71; Match(T__3);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 72; condGroup();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LP );
			State = 77; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BranchContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitBranch(this);
		}
	}

	[RuleVersion(0)]
	public BranchContext branch() {
		BranchContext _localctx = new BranchContext(Context, State);
		EnterRule(_localctx, 10, RULE_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(LP);
			State = 80; Match(T__4);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGEREGION) | (1L << MODELSTATE) | (1L << BOOLEAN) | (1L << VALUETYPE) | (1L << STRING) | (1L << FLOAT) | (1L << INT) | (1L << ID) | (1L << LP))) != 0)) {
				{
				{
				State = 81; expression();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public FunctionIDContext functionID() {
			return GetRuleContext<FunctionIDContext>(0);
		}
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(LP);
			State = 90; functionID();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGEREGION) | (1L << MODELSTATE) | (1L << BOOLEAN) | (1L << VALUETYPE) | (1L << STRING) | (1L << FLOAT) | (1L << INT) | (1L << ID) | (1L << LP))) != 0)) {
				{
				{
				State = 91; expression();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondGroupContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(BS_ReachParser.LP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RP() { return GetToken(BS_ReachParser.RP, 0); }
		public CondGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterCondGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitCondGroup(this);
		}
	}

	[RuleVersion(0)]
	public CondGroupContext condGroup() {
		CondGroupContext _localctx = new CondGroupContext(Context, State);
		EnterRule(_localctx, 14, RULE_condGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(LP);
			State = 100; expression();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 101; expression();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGEREGION) | (1L << MODELSTATE) | (1L << BOOLEAN) | (1L << VALUETYPE) | (1L << STRING) | (1L << FLOAT) | (1L << INT) | (1L << ID) | (1L << LP))) != 0) );
			State = 106; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterGroupContext : ParserRuleContext {
		public ITerminalNode VALUETYPE() { return GetToken(BS_ReachParser.VALUETYPE, 0); }
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public ParameterGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterParameterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitParameterGroup(this);
		}
	}

	[RuleVersion(0)]
	public ParameterGroupContext parameterGroup() {
		ParameterGroupContext _localctx = new ParameterGroupContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameterGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(VALUETYPE);
			State = 109; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptIDContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(BS_ReachParser.INT, 0); }
		public ScriptIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterScriptID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitScriptID(this);
		}
	}

	[RuleVersion(0)]
	public ScriptIDContext scriptID() {
		ScriptIDContext _localctx = new ScriptIDContext(Context, State);
		EnterRule(_localctx, 18, RULE_scriptID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionIDContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public ITerminalNode VALUETYPE() { return GetToken(BS_ReachParser.VALUETYPE, 0); }
		public FunctionIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterFunctionID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitFunctionID(this);
		}
	}

	[RuleVersion(0)]
	public FunctionIDContext functionID() {
		FunctionIDContext _localctx = new FunctionIDContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << VALUETYPE) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalsReferenceContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public GlobalsReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalsReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterGlobalsReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitGlobalsReference(this);
		}
	}

	[RuleVersion(0)]
	public GlobalsReferenceContext globalsReference() {
		GlobalsReferenceContext _localctx = new GlobalsReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_globalsReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public BranchContext branch() {
			return GetRuleContext<BranchContext>(0);
		}
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; call();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; branch();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120; cond();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(BS_ReachParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(BS_ReachParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(BS_ReachParser.STRING, 0); }
		public ITerminalNode DAMAGEREGION() { return GetToken(BS_ReachParser.DAMAGEREGION, 0); }
		public ITerminalNode MODELSTATE() { return GetToken(BS_ReachParser.MODELSTATE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(BS_ReachParser.BOOLEAN, 0); }
		public ITerminalNode ID() { return GetToken(BS_ReachParser.ID, 0); }
		public ITerminalNode VALUETYPE() { return GetToken(BS_ReachParser.VALUETYPE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBS_ReachListener typedListener = listener as IBS_ReachListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAMAGEREGION) | (1L << MODELSTATE) | (1L << BOOLEAN) | (1L << VALUETYPE) | (1L << STRING) | (1L << FLOAT) | (1L << INT) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\x80', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'!', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\"', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '\x38', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', '\x39', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 
		'L', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'M', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'U', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'X', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '_', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\x62', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x6', '\t', 'i', '\n', '\t', '\r', '\t', '\xE', 
		'\t', 'j', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '|', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x2', 
		'\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x5', '\x3', '\x2', '\x18', 
		'\x19', '\x5', '\x2', '\b', '\x10', '\x14', '\x14', '\x19', '\x19', '\x4', 
		'\x2', '\x11', '\x14', '\x16', '\x19', '\x2', '\x80', '\x2', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', '+', 
		'\x3', '\x2', '\x2', '\x2', '\b', '=', '\x3', '\x2', '\x2', '\x2', '\n', 
		'H', '\x3', '\x2', '\x2', '\x2', '\f', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '[', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'n', '\x3', '\x2', '\x2', '\x2', '\x14', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 's', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x1A', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '}', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x5', '\x4', '\x3', 
		'\x2', '\x1F', '!', '\x5', '\x6', '\x4', '\x2', ' ', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\x3', '\x2', '\x2', '\x2', '#', '\x3', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\a', '\x1A', '\x2', '\x2', '%', '&', '\a', '\x3', '\x2', '\x2', 
		'&', '\'', '\a', '\x14', '\x2', '\x2', '\'', '(', '\a', '\x19', '\x2', 
		'\x2', '(', ')', '\x5', '\x1A', '\xE', '\x2', ')', '*', '\a', '\x1B', 
		'\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 
		'\x1A', '\x2', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', '-', '.', '\a', 
		'\x15', '\x2', '\x2', '.', '/', '\a', '\x14', '\x2', '\x2', '/', '\x31', 
		'\x5', '\x14', '\v', '\x2', '\x30', '\x32', '\x5', '\b', '\x5', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x37', '\x3', '\x2', '\x2', '\x2', '\x33', '\x38', 
		'\x5', '\xE', '\b', '\x2', '\x34', '\x38', '\x5', '\x18', '\r', '\x2', 
		'\x35', '\x38', '\x5', '\f', '\a', '\x2', '\x36', '\x38', '\x5', '\n', 
		'\x6', '\x2', '\x37', '\x33', '\x3', '\x2', '\x2', '\x2', '\x37', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '\x1B', '\x2', '\x2', '<', '\a', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '\x1A', '\x2', '\x2', '>', '\x43', '\x5', '\x12', '\n', 
		'\x2', '?', '@', '\a', '\x5', '\x2', '\x2', '@', '\x42', '\x5', '\x12', 
		'\n', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\a', '\x1B', '\x2', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '\x1A', '\x2', '\x2', 'I', 'K', '\a', '\x6', '\x2', '\x2', 
		'J', 'L', '\x5', '\x10', '\t', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\a', '\x1B', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x1A', '\x2', '\x2', 'R', 'V', '\a', '\a', '\x2', 
		'\x2', 'S', 'U', '\x5', '\x1A', '\xE', '\x2', 'T', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x1B', 
		'\x2', '\x2', 'Z', '\r', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', 
		'\x1A', '\x2', '\x2', '\\', '`', '\x5', '\x16', '\f', '\x2', ']', '_', 
		'\x5', '\x1A', '\xE', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\x1B', '\x2', '\x2', '\x64', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', '\x1A', '\x2', '\x2', '\x66', 'h', '\x5', '\x1A', 
		'\xE', '\x2', 'g', 'i', '\x5', '\x1A', '\xE', '\x2', 'h', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\x1B', '\x2', '\x2', 'm', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x14', '\x2', '\x2', 'o', 
		'p', '\a', '\x19', '\x2', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\t', '\x2', '\x2', '\x2', 'r', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\t', '\x3', '\x2', '\x2', 't', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\x19', '\x2', '\x2', 'v', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'w', '|', '\x5', '\x1C', '\xF', '\x2', 'x', '|', 
		'\x5', '\xE', '\b', '\x2', 'y', '|', '\x5', '\f', '\a', '\x2', 'z', '|', 
		'\x5', '\n', '\x6', '\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 
		'x', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', 
		'{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\t', '\x4', '\x2', '\x2', '~', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\r', ' ', '\"', '\x31', '\x37', '\x39', '\x43', 'M', 'V', 
		'`', 'j', '{',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
